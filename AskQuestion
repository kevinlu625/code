import UIKit
import Firebase
import Photos
import FirebaseStorage
import FirebaseFirestore
import FirebaseFunctions
import FirebaseAuth

class CellClass: UITableViewCell {
    
}

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    
    lazy var functions = Functions.functions()

    private var collectionView: UICollectionView?
    
    @IBOutlet weak var btnChannel: UIButton!
    @IBOutlet weak var dueDate: UITextField!
    @IBOutlet weak var typeQuestionField: UITextField!
    
    let db = Firestore.firestore()

    let datePicker = UIDatePicker()
    
    let transparentView = UIView()
    let tableView = UITableView()
    
    var selectedButton = UIButton()
    
    var dataSource = [String] ()
    
    var imagePickerController = UIImagePickerController ()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(CellClass.self, forCellReuseIdentifier: "Cell")
        createDatePicker()
        typeQuestionField.delegate = self
        imagePickerController.delegate = self
        checkPermissions()
    }
    
    func createDatePicker() {
        
        dueDate.textAlignment = .center 
        // toolbar
        let toolbar = UIToolbar()
        toolbar.sizeToFit()
        
        // bar button
        let doneBtn = UIBarButtonItem(barButtonSystemItem: .done, target: nil, action: #selector(donePressed))
        toolbar.setItems([doneBtn], animated: true)
        // assign toolbar
        dueDate.inputAccessoryView = toolbar
        
        // assign date picker to the text field
        dueDate.inputView = datePicker
        
        datePicker.datePickerMode = .dateAndTime

    }
    
    @objc func donePressed() {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .medium
        
        dueDate.text = formatter.string(from: datePicker.date)
        self.view.endEditing(true)
    }
    
    func addTransparentView(frames: CGRect){
        let window = UIApplication.shared.keyWindow
        transparentView.frame = window?.frame ?? self.view.frame
        self.view.addSubview(transparentView)
        
        tableView.frame = CGRect(x: frames.origin.x, y: frames.origin.y + frames.height, width: frames.width, height: 0)
        self.view.addSubview(tableView)
        tableView.layer.cornerRadius = 5
        
        transparentView.backgroundColor = UIColor.black.withAlphaComponent(0.9)
        tableView.reloadData()
        
        let tapgesture = UITapGestureRecognizer(target: self, action: #selector(removeTransparentView))
        transparentView.addGestureRecognizer(tapgesture)
        transparentView.alpha = 0
        UIView.animate(withDuration: 0.4, delay: 0.0, usingSpringWithDamping: 1.0, initialSpringVelocity: 1.0, options: .curveEaseInOut, animations: {
            self.transparentView.alpha = 0.5
            self.tableView.frame = CGRect(x: frames.origin.x, y: frames.origin.y + frames.height + 5, width: frames.width, height: CGFloat(self.dataSource.count * 50))
        }, completion: nil)
    }
    
    @objc func removeTransparentView() {
        let frames = selectedButton.frame
        UIView.animate(withDuration: 0.4, delay: 0.0, usingSpringWithDamping: 1.0, initialSpringVelocity: 1.0, options: .curveEaseInOut, animations: {
                  self.transparentView.alpha = 0
             self.tableView.frame = CGRect(x: frames.origin.x, y: frames.origin.y + frames.height, width: frames.width, height: 0)
              }, completion: nil)
        
    }
    
    @IBAction func submitTapped(_ sender: Any) {
        let user = Auth.auth().currentUser
        let questionPoster = user!.uid
        let dueDate = datePicker.date.description

        functions.httpsCallable("createQuestion").call(["questionText": typeQuestionField.text!, "dueDate":dueDate,"channelName":btnChannel.titleLabel!.text!,"questionPoster":questionPoster,"isArchived": false])
        {
            (result, error) in
                if let error = error as NSError?
                {
                    if error.domain == FunctionsErrorDomain
                    {
                        let code = FunctionsErrorCode(rawValue: error.code)
                        let message = error.localizedDescription
                        let details = error.userInfo[FunctionsErrorDetailsKey]
                    }
            }
            print("create question worked")
        }
        
        /*Firestore.firestore().collection("Channels").document(btnChannel.titleLabel!.text!).setData(["questionText": typeQuestionField.text!, "dueDate":datePicker.date,"channelName":btnChannel.titleLabel!.text!,"questionPoster":questionPoster,"isArchived": false])*/
        
       }
  
    
    @IBAction func uploadImageTapped(_ sender: Any) {
         self.imagePickerController.sourceType = .photoLibrary
         self.present(self.imagePickerController, animated: true, completion: nil)
     }

    @IBAction func onClickChannel(_ sender: Any)
    {
               db.collection("Channels").getDocuments()
               { (querySnapshot, err) in
                   if let err = err
                   {
                       print("Error getting documents: \(err)")
                   }
                   else
                   {
                   self.dataSource.removeAll()
                       for document in querySnapshot!.documents
                       {
                           self.dataSource.append(document.documentID)
                       }
                   }
             }
                   selectedButton = btnChannel
                   addTransparentView(frames: btnChannel.frame)
    }
    
    func checkPermissions() {
        if PHPhotoLibrary.authorizationStatus() != PHAuthorizationStatus.authorized {
            PHPhotoLibrary.requestAuthorization({ (status: PHAuthorizationStatus) -> Void in
                ()
            })
        }

        if PHPhotoLibrary.authorizationStatus() == PHAuthorizationStatus.authorized {
        } else {
            PHPhotoLibrary.requestAuthorization(requestAuthorizationHandler)
        }
        
    }
    
    func requestAuthorizationHandler(status: PHAuthorizationStatus){
        if PHPhotoLibrary.authorizationStatus() == PHAuthorizationStatus.authorized{
            print("We have access to photos")
        } else {
            print("We don't have access to photos")
        }
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        
        if let url = info[UIImagePickerController.InfoKey.imageURL] as? URL {
            print(url)
            uploadToCloud(fileURL: url)
        }
        
        imagePickerController.dismiss(animated: true, completion: nil)
    }
    
    func uploadToCloud(fileURL: URL) {
        let storage = Storage.storage()
        
        let data = Data()
        
        let storageRef = storage.reference()
        
        let localFile = fileURL
        
        let photoRef = storageRef.child("UploadedPhotoTwo")
        
        let uploadTask = photoRef.putFile(from: localFile, metadata: nil) {
        (metadata, err) in
            guard let metadata = metadata else {
                print(err?.localizedDescription)
                return
            }
            print("Photo Uploaded")
        }
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        typeQuestionField.resignFirstResponder()
    }
    
}

extension ViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int{
        return dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)
        cell.textLabel?.text = dataSource[indexPath.row]
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        selectedButton.setTitle(dataSource[indexPath.row], for: .normal)
        removeTransparentView()
    }
    
}

extension ViewController : UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
        
    }
